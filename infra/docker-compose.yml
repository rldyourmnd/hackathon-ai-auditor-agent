services:
  api:
    build:
      context: ../backend
      dockerfile: ../infra/Dockerfile.api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_CHEAP=${OPENAI_MODEL_CHEAP}
      - OPENAI_MODEL_STANDARD=${OPENAI_MODEL_STANDARD}
      - OPENAI_MODEL_PREMIUM=${OPENAI_MODEL_PREMIUM}
      - ENTROPY_N=${ENTROPY_N:-8}
    depends_on:
      - db
      - redis
    volumes:
      - ../backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend_public:
    build:
      context: ..
      dockerfile: ./infra/Dockerfile.backend_public
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - INTERNAL_API_BASE=${INTERNAL_API_BASE:-http://api:8000}
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - DATABASE_URL=${PUBLIC_DATABASE_URL:-postgresql+psycopg2://postgres:postgres@db:5432/auditor}
    depends_on:
      - api
      - db

  web:
    build:
      context: ../frontend
      dockerfile: ../infra/Dockerfile.web
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_BASE=${NEXT_PUBLIC_API_BASE:-http://localhost:8080}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - backend_public

  db:
    image: postgres:15-alpine
    # ports:
    #   - "5434:5432"  # Internal access only
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-curestry}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-curestry}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-curestry}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
