services:
  api:
    build:
      context: ../backend
      dockerfile: ../infra/Dockerfile.api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_CHEAP=${OPENAI_MODEL_CHEAP}
      - OPENAI_MODEL_STANDARD=${OPENAI_MODEL_STANDARD}
      - OPENAI_MODEL_PREMIUM=${OPENAI_MODEL_PREMIUM}
      - ENTROPY_N=${ENTROPY_N:-8}
    depends_on:
      - db
      - redis
    volumes:
      - ../backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  public:
    build:
      context: ../backend_public
      dockerfile: ../infra/Dockerfile.backend_public
    ports:
      - "8080:8080"
    env_file:
      - .env
      - ../backend_public/.env
    environment:
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - INTERNAL_API_BASE=${INTERNAL_API_BASE:-http://api:8000}
      - APP_HOST=${APP_HOST:-0.0.0.0}
      - APP_PORT=${APP_PORT:-8080}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_SECRET=${APP_SECRET:-change_me_super_secret}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_OAUTH_REDIRECT=${GOOGLE_OAUTH_REDIRECT:-http://localhost:8080/auth/google/callback}
      - JWT_ISSUER=${JWT_ISSUER:-auditor.public}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-120}
      - HTTP_TIMEOUT_SECONDS=${HTTP_TIMEOUT_SECONDS:-30}
    depends_on:
      - api
      - db
    volumes:
      - ../backend_public:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: ../frontend
      dockerfile: ../infra/Dockerfile.web
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_BASE=${NEXT_PUBLIC_API_BASE}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - api

  db:
    image: postgres:15-alpine
    # ports:
    #   - "5434:5432"  # Internal access only
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-curestry}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-curestry}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-curestry}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/generate-ssl.sh:/etc/nginx/generate-ssl.sh:ro
    depends_on:
      - public
      - web
    command: |
      sh -c "
      if [ ! -f /etc/nginx/ssl/nginx.crt ]; then
        sh /etc/nginx/generate-ssl.sh;
      fi;
      nginx -g 'daemon off;'
      "

volumes:
  postgres_data:
  redis_data:
